#line 8 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#line 8 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

			// #pragma vertex vert
			// #pragma fragment frag
			// #pragma target 5.0

			#include "UnityCG.cginc"
			#include "perlin.cginc"

			uniform sampler2D _MainTex;

			uniform float _MinHeight;
			uniform float _MaxHeight;
			uniform float4 _SunDir;

			uniform float _PerlinPersistance;

			uniform float4x4 _FrustumCornersWS;
			uniform float4 _CameraWS;

			struct v2f {
				float4 pos : SV_POSITION;
				float2 uv : TEXCOORD0;
				float4 ray : TEXCOORD1;
			};

			v2f vert(appdata_img v) {
				v2f o;

				// Vertex.z is populated by Clouds.cs (companion script) with the current frustum corner
				half index = v.vertex.z;
				v.vertex.z = 0.1;

				o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
				o.uv = v.texcoord.xy;

				o.ray = _FrustumCornersWS[(int)index];
				o.ray.w = index;

				return o;
			}

			float map5(in float3 q)
			{
				float f;
				f =  0.50000*perlin(q); q = q*2.02;
				f += 0.25000*perlin(q); q = q*2.03;
				f += 0.12500*perlin(q); q = q*2.01;
				f += 0.06250*perlin(q); q = q*2.02;
				f += 0.03125*perlin(q);
				return clamp(1.5 - q.y - 2.0 + 1.75*f, 0.0, 1.0);
			}

			float map4(in float3 q)
			{
				float f;
				f =  0.50000*perlin(q); q = q*2.02;
				f += 0.25000*perlin(q); q = q*2.03;
				f += 0.12500*perlin(q); q = q*2.01;
				f += 0.06250*perlin(q);
				return clamp(1.5 - q.y - 2.0 + 1.75*f, 0.0, 1.0);
			}
			float map3(in float3 q)
			{
				float f;
				f =  0.50000*perlin(q); q = q*2.02;
				f += 0.25000*perlin(q); q = q*2.03;
				f += 0.12500*perlin(q);
				return clamp(1.5 - q.y - 2.0 + 1.75*f, 0.0, 1.0);
			}
			float map2(in float3 q)
			{
				float f;
				f =  0.50000*perlin(q); q = q*2.02;
				f += 0.25000*perlin(q);;
				return clamp(1.5 - q.y - 2.0 + 1.75*f, 0.0, 1.0);
			}

			fixed4 integrate(in fixed4 sum, in float dif, in float den, in fixed3 bgcol, in float t)
			{
				// lighting
				fixed3 lin = fixed3(0.65, 0.68, 0.7)*1.3 + 0.5*fixed3(0.7, 0.5, 0.3)*dif;

				fixed3 colrgb = lerp(1.15*fixed3(1.0, 0.95, 0.8), fixed3(0.65, 0.65, 0.65), den);
				fixed4 col = fixed4(colrgb.r, colrgb.g, colrgb.b, (fixed)den);
				col.xyz *= lin;
				col.xyz = lerp(col.xyz, bgcol, 1.0 - exp(-0.003*t*t));
				// front to back blending    
				col.a *= 0.4;
				col.rgb *= col.a;
				return sum + col*(1.0 - sum.a);
			}

#define MARCH(STEPS,MAPLOD) [loop] for(int i=0; i<STEPS; i++) { float3 pos = ro + t*rd; if( pos.y<_MinHeight || pos.y>_MaxHeight || sum.a > 0.99 ) {t += max(0.1,0.02*t); continue;} float den = MAPLOD( pos ); if( den>0.01 ) { float dif =  clamp((den - MAPLOD(pos+0.3*_SunDir))/0.6, 0.0, 1.0 ); sum = integrate( sum, dif, den, bgcol, t ); } t += max(0.1,0.02*t); }

			fixed4 raymarch(in float3 ro, in float3 rd, in fixed3 bgcol)
			{
				fixed4 sum = fixed4(0.0, 0.0, 0.0, 0.0);

				float t = 0.0;

				MARCH(30, map5);
				MARCH(30, map4);
				MARCH(30, map3);
				MARCH(30, map2);

				return clamp(sum, 0.0, 1.0);
			}

			fixed4 frag(v2f i) : SV_Target {
				float3 eyeVec = normalize(i.ray.xyz);

				float3 start = _CameraWS;

				// if(start.y > _MaxHeight+0.001)
				// 	start += eyeVec / abs(eyeVec.y) * abs(start.y - _MaxHeight);
				// else if(start.y < _MinHeight-0.001)
				// 	start += eyeVec / abs(eyeVec.y) * abs(start.y - _MinHeight);

				fixed3 col = tex2D(_MainTex,i.uv);
				fixed4 add = raymarch(start, eyeVec, col);
				return fixed4(col*(1.0-add.w)+add.xyz,1.0);
			}
			